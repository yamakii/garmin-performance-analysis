[project]
name = "garmin-performance-analysis"
version = "0.1.0"
description = "Garmin running performance analysis system with DuckDB and MCP integration"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "garminconnect>=0.2.0",
    "duckdb>=1.1.1",
    "pandas>=2.2.0",
    "polars>=1.9.0",
    "pyarrow>=17.0.0",
    "numpy>=2.1.0",
    "scipy>=1.11.0",
    "jinja2>=3.1.0",
    "python-dotenv>=1.0.0",
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "httpx>=0.27.0",
    "python-multipart>=0.0.12",
    "tqdm>=4.67.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.5.0",
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "pre-commit>=4.0.0",
]
performance = [
    "rich>=13.0.0",
    "pygments>=2.18.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["tools", "servers"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py312"
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "SIM"]
ignore = [
    "E501",  # Line too long (handled by black)
    "E402",  # Module level import not at top of file (intentional for sys.path modification in servers)
    "SIM105",  # try-except-pass is clearer than contextlib.suppress for rollback error handling
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
check_untyped_defs = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "servers.*"
ignore_errors = false

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Markers (enhanced documentation)
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (moderate speed)",
    "performance: Performance benchmark tests",
    "slow: Slow tests (deselected by default)",
    "garmin_api: Tests that require Garmin API authentication (rate limited)",
]

# Optimized addopts (parallel execution with -n 4 for stability)
addopts = """
    -m 'not garmin_api and not slow'
    --strict-markers
    --tb=short
    --disable-warnings
    -n 4
    --maxfail=5
    --durations=10
"""

# Cache optimization
cache_dir = ".pytest_cache"

# Asyncio mode
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["tools", "servers"]
omit = ["tests/*", ".venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
